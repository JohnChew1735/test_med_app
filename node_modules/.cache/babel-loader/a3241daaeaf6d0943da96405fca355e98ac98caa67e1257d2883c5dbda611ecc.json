{"ast":null,"code":"var _jsxFileName = \"/home/project/test_med_app/src/Components/BookingConsultation/BookingConsultation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport DoctorCard from \"../DoctorCard/DoctorCard\";\nimport FindDoctorSearch from \"../FindDoctorSearch/FindDoctorSearch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookingConsultation = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [doctors, setDoctors] = useState([]);\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n\n  // Fetch doctor data from API\n  const getDoctorsDetails = async () => {\n    try {\n      const res = await fetch(\"https://api.npoint.io/9a5543d36f1460da2f63\"); // replace with your API endpoint\n      const data = await res.json();\n      setDoctors(data);\n      setFilteredDoctors(data); // show all initially\n    } catch (err) {\n      console.error(\"Error fetching doctors:\", err);\n    }\n  };\n  useEffect(() => {\n    getDoctorsDetails();\n  }, []);\n\n  // Filter doctors by search term\n  useEffect(() => {\n    if (searchTerm.trim() === \"\") {\n      setFilteredDoctors(doctors); // show all if search is empty\n    } else {\n      const filtered = doctors.filter(doctor => doctor.name.toLowerCase().includes(searchTerm.toLowerCase()) || doctor.speciality.toLowerCase().includes(searchTerm.toLowerCase()));\n      setFilteredDoctors(filtered);\n    }\n  }, [searchTerm, doctors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking-consultation-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Book a Consultation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FindDoctorSearch, {\n      searchTerm: searchTerm,\n      setSearchTerm: setSearchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctor-cards-container\",\n      children: filteredDoctors.length > 0 ? filteredDoctors.map(doctor => /*#__PURE__*/_jsxDEV(DoctorCard, {\n        name: doctor.name,\n        speciality: doctor.speciality,\n        experience: doctor.experience,\n        ratings: doctor.ratings,\n        image: doctor.image\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No doctors found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(BookingConsultation, \"4IPYx8B4uuxovXEZY/K2G0kMXTA=\");\n_c = BookingConsultation;\nexport default BookingConsultation;\nvar _c;\n$RefreshReg$(_c, \"BookingConsultation\");","map":{"version":3,"names":["React","useState","useEffect","DoctorCard","FindDoctorSearch","jsxDEV","_jsxDEV","BookingConsultation","_s","searchTerm","setSearchTerm","doctors","setDoctors","filteredDoctors","setFilteredDoctors","getDoctorsDetails","res","fetch","data","json","err","console","error","trim","filtered","filter","doctor","name","toLowerCase","includes","speciality","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","experience","ratings","image","id","_c","$RefreshReg$"],"sources":["/home/project/test_med_app/src/Components/BookingConsultation/BookingConsultation.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DoctorCard from \"../DoctorCard/DoctorCard\";\nimport FindDoctorSearch from \"../FindDoctorSearch/FindDoctorSearch\";\n\nconst BookingConsultation = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\"); \n  const [doctors, setDoctors] = useState([]);\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n\n  // Fetch doctor data from API\n  const getDoctorsDetails = async () => {\n    try {\n      const res = await fetch(\"https://api.npoint.io/9a5543d36f1460da2f63\"); // replace with your API endpoint\n      const data = await res.json();\n      setDoctors(data);\n      setFilteredDoctors(data); // show all initially\n    } catch (err) {\n      console.error(\"Error fetching doctors:\", err);\n    }\n  };\n\n  useEffect(() => {\n    getDoctorsDetails();\n  }, []);\n\n  // Filter doctors by search term\n  useEffect(() => {\n    if (searchTerm.trim() === \"\") {\n      setFilteredDoctors(doctors); // show all if search is empty\n    } else {\n      const filtered = doctors.filter(\n        (doctor) =>\n          doctor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          doctor.speciality.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      setFilteredDoctors(filtered);\n    }\n  }, [searchTerm, doctors]);\n\n  return (\n    <div className=\"booking-consultation-container\">\n      <h1>Book a Consultation</h1>\n\n      {/* Doctor search */}\n      <FindDoctorSearch searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n\n      {/* Display doctor cards */}\n      <div className=\"doctor-cards-container\">\n        {filteredDoctors.length > 0 ? (\n          filteredDoctors.map((doctor) => (\n            <DoctorCard\n              key={doctor.id}\n              name={doctor.name}\n              speciality={doctor.speciality}\n              experience={doctor.experience}\n              ratings={doctor.ratings}\n              image={doctor.image}\n            />\n          ))\n        ) : (\n          <p>No doctors found.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default BookingConsultation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}